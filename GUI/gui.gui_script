local datos = require("main.datos")
-- vars
local se_empezo_el_juego = false
local desactivar_nodos_iniciales
--nodos
local bija_titulo
local empezar
local empezar_flag
local v1
local v2
local v3
local restart
local restart_flag
local flecha;
local parpadeo_flecha;
local controles;
local texto_final;
local gracias;
--
local tabla_vidas
local vidas_visibles = false;
--
local restablecer_vidas;
local function mostrar_vidas()
	if vidas_visibles then
		for i = #tabla_vidas, 1, -1 do
			gui.animate(tabla_vidas[i], "color.w", 1, gui.EASING_LINEAR, 0.5)
		end
	else
		for i = #tabla_vidas, 1, -1 do
			gui.set_alpha(tabla_vidas[i], 0)
		end
	end
end

local function perder_vida(que_vida)
	if not datos.juego_ganado then
		gui.animate(tabla_vidas[que_vida], "color.w", 0, gui.EASING_LINEAR, 0.15)
	end
end

local function mostrar_gameover()
	gui.set_enabled(restart, true)
	gui.set_enabled(restart_flag, true)
	gui.animate(restart, "color.w", 1, gui.EASING_LINEAR, 1)
end

local function restart_game()
	gui.set_enabled(restart_flag, false)
	gui.animate(restart, "color.w", 0, gui.EASING_LINEAR, 0.5)
	msg.post("main:/player/player", "restart_game")
end

function init(self)
	bija_titulo = gui.get_node("bija_titulo")
	empezar = gui.get_node("empezar")
	empezar_flag = gui.get_node("empezar_flag")
	v1 = gui.get_node("v1")
	v2 = gui.get_node("v2")
	v3 = gui.get_node("v3")
	tabla_vidas = {v1,v2,v3}
	mostrar_vidas()
	restart = gui.get_node("restart")
	restart_flag = gui.get_node("restart_flag")
	gui.set_alpha(restart, 0);
	gui.set_enabled(restart, false)
	gui.set_enabled(restart_flag, false)

	flecha = gui.get_node("flecha");
	gui.set_enabled(flecha, false)
	controles = gui.get_node("controles");
	texto_final = gui.get_node("texto_final")
	gui.set_alpha(texto_final, 0)
	gracias = gui.get_node("gracias");
	gui.set_alpha(gracias, 0)
	--
	gui.animate(bija_titulo, "scale", 1.05, gui.EASING_LINEAR, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	
	--
	gui.set_alpha(empezar, 0)
	gui.animate(empezar, "color.w", 1, gui.EASING_LINEAR, 0.5, 0, function() msg.post("", "acquire_input_focus") end)

end
local function cancelar_parpadeo()
	gui.cancel_animation(flecha, "scale");
	gui.set_scale(flecha, vmath.vector4(1, 1, 1, 1));
	gui.set_enabled(flecha, false);
end
parpadeo_flecha = function()
	gui.set_enabled(flecha, true)
	gui.animate(flecha, "scale", 1.15, gui.EASING_LINEAR, 0.75, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	timer.delay(4, false, cancelar_parpadeo)
end

local function final_final()
	gui.set_alpha(texto_final, 0)
	msg.post("/player/player", "final_final")
	gui.animate(gracias, "color.w", 1, gui.EASING_LINEAR, 0.75)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("empezar_juego") then
		parpadeo_flecha();
		vidas_visibles = true;
		mostrar_vidas()
		--print("mostrar vidas")
	elseif message_id == hash("perder_vida") then
		local que_vida = message.vidas+1
		perder_vida(que_vida)
	elseif message_id == hash("game_over") then
		timer.delay(0.5, false, mostrar_gameover)
		--mostrar_gameover()
	elseif message_id == hash("restablecer_vidas") then
		restablecer_vidas();
	elseif message_id == hash("ocultar_vidas") then
		for i = #tabla_vidas, 1, -1 do
			gui.set_alpha(tabla_vidas[i], 0)
		end
	elseif message_id == hash("empezar_secuencia_final") then
		gui.animate(texto_final, "color.w", 1, gui.EASING_LINEAR, 0.75)
		timer.delay(6, false, final_final)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(empezar, action.x, action.y) and gui.is_enabled(empezar_flag) then
			gui.set_enabled(controles, false);
			datos.empezar_juego();
			desactivar_nodos_iniciales()
		elseif gui.pick_node(restart, action.x, action.y) and gui.is_enabled(restart_flag) then
			restart_game()
			print("restart game")
		end
	

	end
end

desactivar_nodos_iniciales = function()
	gui.set_enabled(empezar_flag, false)
	gui.animate(empezar, "color.w", 0, gui.EASING_LINEAR, 1)
	gui.animate(bija_titulo, "color.w", 0, gui.EASING_LINEAR, 1)
end


restablecer_vidas = function()
	mostrar_vidas()
end







