local datos = require("main.datos")
local camera = require "orthographic.camera"
local CAMERA_ID = "camera#script"
local PLAYER_ID = hash("/player/player")
-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- the acceleration to move right/left
local move_acceleration = 3500
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 250
-- gravity pulling the player down in pixel units
local gravity = -2000 --(1000)
-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 950 --(550)
-- time within a double tap must occur to be considered a jump (only used for mouse/touch controls)
local touch_jump_timeout = 0.2

-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local group_obstacle = hash("base")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local input_touch = hash("touch")
local input_golpe = hash("golpe")
local anim_run = hash("run")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")
local anim_golpe = hash("golpe")
local respuesta_t = hash("trigger_response")
local enemigo_t = hash("enemigo")
local golpeando = false;
local puede_ser_tocado = true;
local mirar_a_la_derecha = false;
-- funciones
local empezar_juego;
local restart_game;
local cambiar_direccio_vista;
local mover_pared;
-- vars
local vidas_iniciales = 2;
local vidas = 2;
local pos_inicial;
local pos_inicial_pared;

function init(self)
	msg.post("@render:", "clear_color", { color = vmath.vector4(0, 0.25, 0.75, 0) } )
	
	-- this lets us handle input in this script
	--msg.post(".", "acquire_input_focus")
	
	-- Camara, propiedades iniciales.
	msg.post(CAMERA_ID, "use_projection", { projection = hash("FIXED_AUTO") })
	msg.post(CAMERA_ID, "follow", {target = PLAYER_ID, vertical = false, offset = vmath.vector3(90, 0, 0)})
	go.set_position(vmath.vector3(0, 180, 0), CAMERA_ID )
	msg.post(CAMERA_ID, "zoom_to", { zoom = 2.5 })

	-- initial player velocity
	self.velocity = vmath.vector3(0, 0, 0)
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	-- if the player stands on ground or not
	self.ground_contact = false

	
	-- movement input in the range [-1,1]
	self.move_input = 0	
	-- the currently playing animation
	self.anim = nil
	--
	datos.player_pos = go.get_position()
	pos_inicial = datos.player_pos;
	msg.post("main:/player/bija", "disable")
	-- pared
	pos_inicial_pared = go.get_position("/paredes")
end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		local anim_props = { blend_duration = 0.1 }
		spine.play_anim("main:/player/spine#spinemodel", anim, go.PLAYBACK_LOOP_FORWARD, anim_props)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animations(self)
	-- make sure the player character faces the right way
	--sprite.set_hflip("#sprite", self.move_input < 0)
	
	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
			--print("idle")
		else
			play_animation(self, anim_run)
			--print("run")
			

		end
	--else
		--if self.velocity.y > 0 then
			--play_animation(self, anim_jump)
		--else
			--play_animation(self, anim_fall)
		--end
	end
end

function update(self, dt)
	if dt >= 0.1 then
		return
	elseif datos.game_over then
		return
	end
	-- determine the target speed based on input
	local target_speed = self.move_input * max_speed
	-- calculate the difference between our current speed and the target speed
	local speed_diff = target_speed - self.velocity.x
	-- the complete acceleration to integrate over this frame
	local acceleration = vmath.vector3(0, gravity, 0)
	if speed_diff ~= 0 then
		-- set the acceleration to work in the direction of the difference
		if speed_diff < 0 then
			acceleration.x = -move_acceleration
		else
			acceleration.x = move_acceleration
		end
		-- decrease the acceleration when air-borne to give a slower feel
		if not self.ground_contact then
			acceleration.x = air_acceleration_factor * acceleration.x
		end
	end
	-- calculate the velocity change this frame (dv is short for delta-velocity)
	local dv = acceleration * dt
	-- check if dv exceeds the intended speed difference, clamp it in that case
	if math.abs(dv.x) > math.abs(speed_diff) then
		dv.x = speed_diff
	end
	-- save the current velocity for later use
	-- (self.velocity, which right now is the velocity used the previous frame)
	local v0 = self.velocity
	-- calculate the new velocity by adding the velocity change
	self.velocity = self.velocity + dv
	-- calculate the translation this frame by integrating the velocity
	local dp = (v0 + self.velocity) * dt * 0.5
	-- apply it to the player character
	go.set_position(go.get_position() + dp)

	if not golpeando then
		update_animations(self)
		msg.post("main:/player/bija", "disable")
	end

	-- reset volatile state
	self.correction = vmath.vector3()
	self.move_input = 0
	self.ground_contact = false

	datos.player_pos = go.get_position()
end

local function handle_obstacle_contact(self, normal, distance)
	-- project the correction vector onto the contact normal
	-- (the correction vector is the 0-vector for the first contact point)
	local proj = vmath.dot(self.correction, normal)
	-- calculate the compensation we need to make for this contact point
	local comp = (distance - proj) * normal
	-- add it to the correction vector
	self.correction = self.correction + comp
	-- apply the compensation to the player character
	go.set_position(go.get_position() + comp)
	-- check if the normal points enough up to consider the player standing on the ground
	-- (0.7 is roughly equal to 45 degrees deviation from pure vertical direction)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	-- project the velocity onto the normal
	proj = vmath.dot(self.velocity, normal)
	-- if the projection is negative, it means that some of the velocity points towards the contact point
	if proj < 0 then
		-- remove that component in that case
		self.velocity = self.velocity - proj * normal
	end
end

local function restablecer_perder_vida()
	go.cancel_animations("spine#spinemodel")
	go.cancel_animations("spine")
	go.set("spine#spinemodel", "tint.w", 1)
	go.set_scale(1, "spine")
	puede_ser_tocado = true;
end

local function game_over()
	print("game over")
	msg.post("", "release_input_focus")
	datos.game_over = true;
	datos.gain = 0;
	go.animate("spine#spinemodel", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1)
	msg.post("main:/gui#gui", "game_over")
	-- enviar mensaje al gui
end

local function perder_vida()
	puede_ser_tocado = false;
	msg.post("main:/gui#gui", "perder_vida", {vidas = vidas})
	if vidas >= 1 then
		print("contacto con el enemgio, perder una vida")
		vidas = vidas - 1
		go.animate("spine#spinemodel", "tint.w", go.PLAYBACK_LOOP_PINGPONG, 0.25, go.EASING_LINEAR, 0.5)
		go.animate("spine", "scale", go.PLAYBACK_LOOP_PINGPONG, 1.015, go.EASING_LINEAR, 0.25)
		go.animate("/player/placebo", "scale", go.PLAYBACK_ONCE_PINGPONG, 1.015, go.EASING_LINEAR, 2.5, 0,
		function()
			restablecer_perder_vida()
		end)
	else 
		game_over()
	end
end

mover_pared = function(posicion)
	msg.post("/paredes", "disable")
	go.set_position(vmath.vector3(posicion.x - 250, 248, 0), "/paredes")
	msg.post("/paredes", "enable")
end

local function mover_camara_jefe()
	-- sacar camara y input
	msg.post(CAMERA_ID, "unfollow");
	msg.post("", "release_input_focus");
	-- No se puede tocar y eliminar enemigos
	puede_ser_tocado = false;
	datos.eliminar_enemigos = true;
	-- acomodar direccion donde mira player
	mirar_a_la_derecha = true;
	cambiar_direccio_vista(0, 1)
	vidas = 2;
	msg.post("main:/gui#gui", "restablecer_vidas")

	-- mover pared izquierda
	local pos = go.get_position()
	mover_pared(pos)
	-- mover camara
	
	go.animate("camera", "position.x", go.PLAYBACK_ONCE_FORWARD, pos.x + 360, go.EASING_LINEAR, 2, 0,
	function()
		msg.post("/factory#factory_enemigos", "crear_jefe")
		puede_ser_tocado = true;
	end)


end


function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end

	elseif message_id == respuesta_t or message_id == hash("naranja") then
		if message.enter and message.other_group == enemigo_t then
			if puede_ser_tocado then
				perder_vida()
			end
		end
	elseif message_id == hash("empezar_juego") then
		empezar_juego();
		--print("empezar juego player script")
	elseif message_id == hash("restart_game") then
		restart_game()
	elseif message_id == hash("activar_jefe") then
		mover_camara_jefe()
	elseif message_id == hash("juego_ganado") then
		msg.post("", "release_input_focus")
	elseif message_id == hash("no_puede_ser_tocado") then
		go.cancel_animations("/player/placebo")
		vidas = 5;
		puede_ser_tocado = false;
	end
end

local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		--play_animation(self, anim_jump)
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end
local function test1 (message_id, message, sender)
	if message == hash("spine_animation_done") then
		golpeando = false
		local anim_props = { blend_duration = 0.1 }
		spine.play_anim("main:/player/spine#spinemodel", anim_idle, go.PLAYBACK_ONCE_FORWARD, anim_props)
		
	end
end
local function activar_bija()
	msg.post("main:/player/bija", "enable")
end
local function golpe(self)
	spine.cancel("main:/player/spine#spinemodel")
	print("BIJAZO")
	golpeando = true
	sound.play("#sound")
	local anim_props = { blend_duration = 0.1 }
	timer.delay(0.2, false, activar_bija)
	spine.play_anim("main:/player/spine#spinemodel", anim_golpe, go.PLAYBACK_ONCE_FORWARD, anim_props, 
	function(self)
		msg.post("main:/player/bija", "disable")
		golpeando = false
		local anim_props = { blend_duration = 0.1 }
		spine.play_anim("main:/player/spine#spinemodel", anim_idle, go.PLAYBACK_LOOP_FORWARD, anim_props)
		self.anim = nil
	end)
end

local function acomodar_bija(dir)
	go.set_position( vmath.vector3(73 * dir, 49, 0),"main:/player/bija")
	go.set("main:/player/bija", "euler.z", 13.62 * dir)
	
end

cambiar_direccio_vista = function(euler, dir)
	if not mirar_a_la_derecha then
		go.set("main:/player/spine", "euler.y", euler)
		acomodar_bija(dir)
	end
end

function on_input(self, action_id, action)
	if not golpeando then
		if action_id == input_golpe and action.pressed then
			golpe(self)
			return
		elseif action_id == input_left then
			self.move_input = -action.value
			cambiar_direccio_vista(180, -1)

		elseif action_id == input_right then
			self.move_input = action.value
			cambiar_direccio_vista(0, 1)
			
		elseif action_id == input_jump then
			jump(self)
			if action.pressed then
				--jump(self)
			elseif action.released then
				abort_jump(self)
			end		
		end
	end
end

------

local function empezar_juego_delay()
	go.animate(CAMERA_ID, "zoom", go.PLAYBACK_ONCE_FORWARD, 1.15, go.EASING_INBACK, 1.25, 0, 
	function()
		msg.post("", "acquire_input_focus")
		msg.post("main:/factory#factory_enemigos", "empezar_juego")
		msg.post("main:/gui#gui", "empezar_juego")

	end)	
	go.animate(CAMERA_ID, "follow_offset", go.PLAYBACK_ONCE_FORWARD, vmath.vector3(0, 0, 0), go.EASING_INBACK, 1.25)
	go.set_position(vmath.vector3(0, 200, 0), CAMERA_ID )
end

empezar_juego = function()
	spine.cancel("main:/player/spine#spinemodel")
	sound.play("#sound")
	local anim_props = { blend_duration = 0.1 }
	spine.play_anim("main:/player/spine#spinemodel", anim_golpe, go.PLAYBACK_ONCE_FORWARD, anim_props, 
	function(self)
		local anim_props = { blend_duration = 0.1 }
		spine.play_anim("main:/player/spine#spinemodel", anim_idle, go.PLAYBACK_LOOP_FORWARD, anim_props)
		self.anim = nil
	end)
	timer.delay(0.5, false, empezar_juego_delay)
end


local function restablecer_player()
	go.animate("spine#spinemodel", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 0.1)
	vidas = vidas_iniciales;
	msg.post("main:/gui#gui", "empezar_juego")
	msg.post("main:/factory#factory_enemigos", "restart_game")
	puede_ser_tocado = true;
	datos.game_over = false;
	datos.jefe_activo = false;
	mirar_a_la_derecha = false;
	msg.post("", "acquire_input_focus")
	msg.post("/detector/jefe#collisionobject", "enable")
	--/jefe#collisionobject
end

restart_game = function()
	print("restart game")
	--msg.post(CAMERA_ID, "follow");
	msg.post("camera", "follow", { target = PLAYER_ID, vertical = false })
	mover_pared(pos_inicial_pared);
	--go.set_position(vmath.vector3(0, 200, 0), CAMERA_ID )
	go.animate("player", "position", go.PLAYBACK_ONCE_FORWARD, pos_inicial, go.EASING_LINEAR, 1, 0, 
	function()
		restablecer_player()
	end)
end









